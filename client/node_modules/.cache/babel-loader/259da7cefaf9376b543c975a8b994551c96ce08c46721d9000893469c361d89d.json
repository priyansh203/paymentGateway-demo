{"ast":null,"code":"var _jsxFileName = \"/Users/priyansh/Desktop/untitled folder/Code/React/paymentInt/client/src/product.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Product() {\n  const paymentHandler = async e => {\n    const amount = 50000;\n    const currency = \"INR\";\n    const receiptId = \"dfa\";\n    const response = await fetch(\"http://localhost:5003/order\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        amount,\n        currency,\n        receipt: receiptId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const order = await response.json();\n    console.log(order);\n    var options = {\n      \"key\": \"rzp_test_cpQCkptOoWacuj\",\n      // Enter the Key ID generated from the Dashboard\n      amount,\n      // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n      currency,\n      \"name\": \"Acme Corp\",\n      //your business name\n      \"description\": \"Test Transaction\",\n      \"image\": \"https://example.com/your_logo\",\n      \"order_id\": order.id,\n      //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\n      \"handler\": function (response) {\n        alert(response.razorpay_payment_id);\n        alert(response.razorpay_order_id);\n        alert(response.razorpay_signature);\n      },\n      \"prefill\": {\n        //We recommend using the prefill parameter to auto-fill customer's contact information, especially their phone number\n        \"name\": \"Gaurav Kumar\",\n        //your customer's name\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9000090000\" //Provide the customer's phone number for better conversion rates \n      },\n      \"notes\": {\n        \"address\": \"Razorpay Corporate Office\"\n      },\n      \"theme\": {\n        \"color\": \"#3399cc\"\n      }\n    };\n    var rzp1 = new window.Razorpay(options);\n    rzp1.on('payment.failed', function (response) {\n      alert(response.error.code);\n      alert(response.error.description);\n      alert(response.error.source);\n      alert(response.error.step);\n      alert(response.error.reason);\n      alert(response.error.metadata.order_id);\n      alert(response.error.metadata.payment_id);\n    });\n    rzp1.open();\n    e.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pay 500 INR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: paymentHandler,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_c = Product;\nexport default Product;\nvar _c;\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"names":["Product","paymentHandler","e","amount","currency","receiptId","response","fetch","method","body","JSON","stringify","receipt","headers","order","json","console","log","options","id","handler","alert","razorpay_payment_id","razorpay_order_id","razorpay_signature","rzp1","window","Razorpay","on","error","code","description","source","step","reason","metadata","order_id","payment_id","open","preventDefault","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/priyansh/Desktop/untitled folder/Code/React/paymentInt/client/src/product.jsx"],"sourcesContent":["function Product() {\n\n    const paymentHandler = async (e) => {\n        const amount = 50000;\n        const currency=\"INR\";\n        const receiptId = \"dfa\";\n\n        const response = await fetch(\"http://localhost:5003/order\",{\n            method: \"POST\",\n            body: JSON.stringify({\n                amount,\n                currency,\n                receipt: receiptId\n            }),\n            headers:{\n                \"Content-Type\" : \"application/json\"\n            }\n        });\n        const order = await response.json();\n        console.log(order);\n\n        var options = {\n            \"key\": \"rzp_test_cpQCkptOoWacuj\", // Enter the Key ID generated from the Dashboard\n            amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n            currency,\n            \"name\": \"Acme Corp\", //your business name\n            \"description\": \"Test Transaction\",\n            \"image\": \"https://example.com/your_logo\",\n            \"order_id\": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\n            \"handler\": function (response){\n                alert(response.razorpay_payment_id);\n                alert(response.razorpay_order_id);\n                alert(response.razorpay_signature)\n            },\n            \"prefill\": { //We recommend using the prefill parameter to auto-fill customer's contact information, especially their phone number\n                \"name\": \"Gaurav Kumar\", //your customer's name\n                \"email\": \"gaurav.kumar@example.com\", \n                \"contact\": \"9000090000\"  //Provide the customer's phone number for better conversion rates \n            },\n            \"notes\": {\n                \"address\": \"Razorpay Corporate Office\"\n            },\n            \"theme\": {\n                \"color\": \"#3399cc\"\n            }\n        };\n        var rzp1 = new window.Razorpay(options);\n        rzp1.on('payment.failed', function (response){\n                alert(response.error.code);\n                alert(response.error.description);\n                alert(response.error.source);\n                alert(response.error.step);\n                alert(response.error.reason);\n                alert(response.error.metadata.order_id);\n                alert(response.error.metadata.payment_id);\n        });\n\n        rzp1.open();\n        e.preventDefault();\n    };\n\n    return ( \n        <div>\n            <h1>Pay 500 INR</h1>\n            <button onClick={paymentHandler}>Pay</button>\n        </div>\n     );\n}\n\nexport default Product;"],"mappings":";;AAAA,SAASA,OAAOA,CAAA,EAAG;EAEf,MAAMC,cAAc,GAAG,MAAOC,CAAC,IAAK;IAChC,MAAMC,MAAM,GAAG,KAAK;IACpB,MAAMC,QAAQ,GAAC,KAAK;IACpB,MAAMC,SAAS,GAAG,KAAK;IAEvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAC;MACvDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBR,MAAM;QACNC,QAAQ;QACRQ,OAAO,EAAEP;MACb,CAAC,CAAC;MACFQ,OAAO,EAAC;QACJ,cAAc,EAAG;MACrB;IACJ,CAAC,CAAC;IACF,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACnCC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAElB,IAAII,OAAO,GAAG;MACV,KAAK,EAAE,yBAAyB;MAAE;MAClCf,MAAM;MAAE;MACRC,QAAQ;MACR,MAAM,EAAE,WAAW;MAAE;MACrB,aAAa,EAAE,kBAAkB;MACjC,OAAO,EAAE,+BAA+B;MACxC,UAAU,EAAEU,KAAK,CAACK,EAAE;MAAE;MACtB,SAAS,EAAE,SAAAC,CAAUd,QAAQ,EAAC;QAC1Be,KAAK,CAACf,QAAQ,CAACgB,mBAAmB,CAAC;QACnCD,KAAK,CAACf,QAAQ,CAACiB,iBAAiB,CAAC;QACjCF,KAAK,CAACf,QAAQ,CAACkB,kBAAkB,CAAC;MACtC,CAAC;MACD,SAAS,EAAE;QAAE;QACT,MAAM,EAAE,cAAc;QAAE;QACxB,OAAO,EAAE,0BAA0B;QACnC,SAAS,EAAE,YAAY,CAAE;MAC7B,CAAC;MACD,OAAO,EAAE;QACL,SAAS,EAAE;MACf,CAAC;MACD,OAAO,EAAE;QACL,OAAO,EAAE;MACb;IACJ,CAAC;IACD,IAAIC,IAAI,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACT,OAAO,CAAC;IACvCO,IAAI,CAACG,EAAE,CAAC,gBAAgB,EAAE,UAAUtB,QAAQ,EAAC;MACrCe,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACC,IAAI,CAAC;MAC1BT,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACE,WAAW,CAAC;MACjCV,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACG,MAAM,CAAC;MAC5BX,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACI,IAAI,CAAC;MAC1BZ,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACK,MAAM,CAAC;MAC5Bb,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACM,QAAQ,CAACC,QAAQ,CAAC;MACvCf,KAAK,CAACf,QAAQ,CAACuB,KAAK,CAACM,QAAQ,CAACE,UAAU,CAAC;IACjD,CAAC,CAAC;IAEFZ,IAAI,CAACa,IAAI,CAAC,CAAC;IACXpC,CAAC,CAACqC,cAAc,CAAC,CAAC;EACtB,CAAC;EAED,oBACIC,OAAA;IAAAC,QAAA,gBACID,OAAA;MAAAC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBL,OAAA;MAAQM,OAAO,EAAE7C,cAAe;MAAAwC,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd;AAACE,EAAA,GAnEQ/C,OAAO;AAqEhB,eAAeA,OAAO;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}